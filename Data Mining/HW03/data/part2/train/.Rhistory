install.packages("rmarkdown")
library("rmarkdown")
sample <- rnegbin(100)
sample <- rnbinom(100)
?rnbinom
sample <- rnbinom(n=100,size=2, mu=10)
hist(sample)
# Setting a seed for reproducability
set.seed(99)
# Checking parameters of distribution
?rnbinom
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n=100,size=2, mu=10, )
# Plots
hist(sample)
# Taking a sample and storing it
sample <- rnbinom(n, dispersion, mu)
# Setting a seed for reproducability
set.seed(99)
# Checking parameters of distribution
?rnbinom
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n, dispersion, mu)
# Plots
hist(sample)
# Setting a seed for reproducability
set.seed(99)
# Checking parameters of distribution
?rnbinom
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n, dispersion, mu)
# Plots
hist(sample)
# Checking parameters of distribution
?rnbinom
# Setting a seed for reproducability
set.seed(99)
# Checking parameters of distribution
?rnbinom
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n, dispersion, mu)
# Plots
# Setting a seed for reproducability
set.seed(99)
# Checking parameters of distribution
?rnbinom
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n, dispersion, mu)
# Taking a sample and storing it
sample <- rnbinom(n=n, size = dispersion, mu)
# Taking a sample and storing it
sample <- rnbinom(n=n, size = dispersion, mu=mu)
# Plots
hist(sample)
hist(log(x+1))
hist(log(sample+1))
# Plots
par(mfrow=c(1,2))
hist(sample)
hist(log(sample+1))
# Setting a seed for reproducability
set.seed(99)
# Checking parameters of distribution
?rnbinom
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n=n, size=dispersion, mu=mu)
# Plots
par(mfrow=c(1,2))
hist(sample)
hist(log(sample+1))
# Setting a seed for reproducability
set.seed(99)
# Checking parameters of distribution
?rnbinom
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n=n, size=dispersion, mu=mu)
# Plots
par(mfrow=c(1,2)) # setting plot display preferences
hist(sample)
hist(log(sample+1))
# Setting a seed for reproducability
set.seed(99)
# Checking parameters of distribution
?rnbinom
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n=n, size=dispersion, mu=mu)
# Plots
par(mfrow=c(1,2)) # setting plot display preferences
hist(sample)
hist(log(sample+1))
# Setting a seed for reproducibility
set.seed(99)
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n=n, size=dispersion, mu=mu)
# Plots
par(mfrow=c(1,2)) # setting plot display preferences
hist(sample)
hist(log(sample+1))
variance = mu+mu^2*dispersion
mean = mu
variance = mu+mu^2*dispersion
print("Mean = ", mean)
print("Variance =", variance)
# Setting a seed for reproducibility
set.seed(99)
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n=n, size=dispersion, mu=mu)
# Plots
par(mfrow=c(1,2)) # setting plot display preferences
hist(sample)
hist(log(sample+1))
mean = mu
variance = mu+mu^2*dispersion
print("Mean = ", mean)
print("Variance =", variance)
# Setting a seed for reproducibility
set.seed(99)
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n=n, size=dispersion, mu=mu)
# Plots
par(mfrow=c(1,2)) # setting plot display preferences
hist(sample)
hist(log(sample+1))
mean = mu
variance = mu+mu^2*dispersion
print("Mean = "+ mean)
?print
print(paste("Mean = "+ mean)
print(paste("Mean = ", mean)
print(paste("Mean = "+ mean)
print(paste("Mean = ", mean))
?paste
print(paste("Mean = ", mean, sep = " "))
print(paste("Mean = ", mean, sep = ""))
# Setting a seed for reproducibility
set.seed(99)
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n=n, size=dispersion, mu=mu)
# Plots
par(mfrow=c(1,2)) # setting plot display preferences
hist(sample)
hist(log(sample+1))
mean = mu
variance = mu+mu^2*dispersion
print(paste("Mean = ", mean, sep = ""))
print(paste("Variance =", variance, sep = ""))
# Setting a seed for reproducibility
set.seed(99)
# Defining desired parameters of the distribution
n <- 100
dispersion <- 2
mu <- 2
# Taking a sample and storing it
sample <- rnbinom(n=n, size=dispersion, mu=mu)
# Plots
par(mfrow=c(1,2)) # setting plot display preferences
hist(sample)
hist(log(sample+1))
library("limma")
library("ggplot2")
install.packages("limma")
library("limma")
install.packages("limma")
library("limma")
install.packages("installr")
library(installr)
updateR()
nGenes <- 10000                   # number of "features"
nSamples <- 6                     # number of samples (split equal in 2 groups)
pDiff <- .1                       # percent of genes "differential
grp <- rep(0:1,each=nSamples/2)   # dummy variable for exp. group
trueFC <- 2                       # log-fold-change of truly DE
d0 <- 1
s0 <- 0.8
sd <- s0*sqrt(d0/rchisq(nGenes,df=d0))  # dist'n of s.d.
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
nr=nGenes,nc=nSamples)
indD <- 1:floor(pDiff*nGenes)
diff <- sample(c(-1,1),max(indD),replace=TRUE)*trueFC
y[indD,grp==1] <- y[indD,grp==1] + diff
y
var(y[,1])
variances <- c()
for(i in 1:ncol(y)){
variances[i] <- var(y[,i])
}
variances
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
nr=nGenes,nc=nSamples)
y
residuals(variances)
variances <- c()
for(i in 1:ncol(y)){
variances[i] <- var(y[,i])
residuals(variances[i])
}
nGenes <- 10000                   # number of "features"
nSamples <- 6                     # number of samples (split equal in 2 groups)
pDiff <- .1                       # percent of genes "differential
grp <- rep(0:1,each=nSamples/2)   # dummy variable for exp. group
trueFC <- 2                       # log-fold-change of truly DE
d0 <- 1
s0 <- 0.8
sd <- s0*sqrt(d0/rchisq(nGenes,df=d0))  # dist'n of s.d.
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
nr=nGenes,nc=nSamples)
indD <- 1:floor(pDiff*nGenes)
diff <- sample(c(-1,1),max(indD),replace=TRUE)*trueFC
y[indD,grp==1] <- y[indD,grp==1] + diff
View(y)
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
nr=nGenes,nc=nSamples)
indD <- 1:floor(pDiff*nGenes)
diff <- sample(c(-1,1),max(indD),replace=TRUE)*trueFC
y[indD,grp==1] <- y[indD,grp==1] + diff
(design <- model.matrix(~grp))
fit <- lmFit(y,design)
cols <- rep("non-differential",nrow(y))
cols[indD] <- "differential"
qplot(y=fit$t[,2]) + geom_point(aes(colour=cols))
R.version
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
library("limma")
library("ggplot2")
nGenes <- 10000                   # number of "features"
nSamples <- 6                     # number of samples (split equal in 2 groups)
pDiff <- .1                       # percent of genes "differential
grp <- rep(0:1,each=nSamples/2)   # dummy variable for exp. group
trueFC <- 2                       # log-fold-change of truly DE
d0 <- 1
s0 <- 0.8
sd <- s0*sqrt(d0/rchisq(nGenes,df=d0))  # dist'n of s.d.
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
nr=nGenes,nc=nSamples)
indD <- 1:floor(pDiff*nGenes)
diff <- sample(c(-1,1),max(indD),replace=TRUE)*trueFC
y[indD,grp==1] <- y[indD,grp==1] + diff
variances <- c()
for(i in 1:ncol(y)){
variances[i] <- var(y[,i])
}
residuals(variances[i])
variances <- c()
for(i in 1:ncol(y)){
variances[i] <- var(y[,i])
}
(design <- model.matrix(~grp))
fit <- lmFit(y,design)
fit <- eBayes(fit)
names(fit)
cols <- rep("non-differential",nrow(y))
cols[indD] <- "differential"
qplot(y=fit$t[,2]) + geom_point(aes(colour=cols))
?sample
obs_vars <- c()
true_vars <- c()
for(i in 1:nrow(y)){
obs_vars[i] <- var(y[i,])
true_vars[i] <- (sd[i])**2
}
plot(obs_vars)
plot(true_vars)
obs_vars <- c()
true_vars <- c()
resid_vars <- c()
for(i in 1:nrow(y)){
obs_vars[i] <- var(y[i,])
true_vars[i] <- (sd[i])**2
resid_vars[i] <- obs_vars[i] - true_vars[i]
}
plot(obs_vars~true_vars)
qplot(obs_vars~true_vars)
qqplot(obs_vars~true_vars)
plot(obs_vars,true_vars)
plot(obs_vars)
plot(true_vars)
plot(obs_vars, y = c(-1,1))
plot(obs_vars)
plot(true_vars)
plot(obs_vars)
plot(true_vars)
resid_vars
(design <- model.matrix(~grp))
?model.matrix
plot(log(true_vars) ~ log(obs_vars))
grp1 <- y[,1:3]
grp2 <- y[,4:6]
n <- nrow(y)
obs_var1 <- c()
obs_var2 <- c()
true_var <- c()
resid_var <- c()
for(i in 1:nrow(y)){
obs_var1[i] <- var(grp1[i,])
obs_var2[i] <- var(grp2[i,])
true_var[i] <- (sd[i])**2
resid_var[i] <- obs_vars[i] - true_vars[i]
pooled <- ((n-1)*obs_var1[i,] + (n-1)*obs_var2[i,]) / (n+n-2)
}
grp1 <- y[,1:3]
grp2 <- y[,4:6]
n <- nrow(y)
obs_var1 <- c()
obs_var2 <- c()
true_var <- c()
resid_var <- c()
for(i in 1:nrow(y)){
obs_var1[i] <- var(grp1[i,])
obs_var2[i] <- var(grp2[i,])
true_var[i] <- (sd[i])**2
resid_var[i] <- obs_vars[i] - true_vars[i]
pooled <- ((n-1)*obs_var1[i] + (n-1)*obs_var2[i]) / (n+n-2)
}
plot(log(true_vars) ~ log(obs_vars)) # plot of the true vs. observed variances on log scale
grp1 <- y[,1:3]
grp2 <- y[,4:6]
n <- nrow(y)
obs_var1 <- c()
obs_var2 <- c()
true_var <- c()
resid_var <- c()
pooled <- c()
for(i in 1:nrow(y)){
obs_var1[i] <- var(grp1[i,])
obs_var2[i] <- var(grp2[i,])
true_var[i] <- (sd[i])**2
resid_var[i] <- obs_vars[i] - true_vars[i]
pooled[i] <- ((n-1)*obs_var1[i] + (n-1)*obs_var2[i]) / (n+n-2)
}
plot(log(true_vars) ~ log(obs_vars)) # plot of the true vs. observed variances on log scale
hist(pooled)
hist(true_var)
upset(fromList(x), order.by = "freq")
library(limma)
library(UpSetR)
library("affy")
library("preprocessCore")
m
read.delim('tumor_info.txt')
setwd("~/University/ETH HS22/Data Mining I/HW/HW03/data/part2/train")
read.delim('tumor_info.txt')
dd <- read.delim('tumor_info.txt')
View(dd)
